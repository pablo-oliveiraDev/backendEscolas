// Generated by CodiumAI

import { Request, Response } from "express";
import { DeleteAlunoController } from "../../controllers/pessoas/DeletePessoaController";
import { prismaClient } from '../../database/prismaClient';

describe('DeleteAlunoController', () => {



    // Test that the DeleteAlunoController can successfully delete an existing aluno when the id is valid and the statusCadastro is set to true.
    it('should delete an existing aluno with valid id and statusCadastro set to true', async () => {
        // Arrange
        const request = {
            params: {
                id: 'validId'
            },
        } as unknown as Request;
        const response = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        } as unknown as Response;
       
        const deleteAlunoController = new DeleteAlunoController(null);
        prismaClient.pessoaDadosPessoais.update = jest.fn().mockResolvedValue({});       


        // Act
        await deleteAlunoController.handle(request, response);

        // Assert
        expect(response.status).toHaveBeenCalledWith(200);
        expect(response.json).toHaveBeenCalledWith({ msg: 'Aluno deletado com sucesso! üëçüèº' });
        expect(prismaClient.pessoaDadosPessoais.update).toHaveBeenCalledWith({
            where: {
                id: Number(request.params.id)
            },
            data: {
                dadosDocumentos: {
                    update: {
                        statusCadastro: false,
                        deleted_at: expect.any(String)
                    }
                }
            }
        });
    });
    it('Should be have error in id null', async ()=>{
        const request = {
            params: {
                id: null,
            },
        } as unknown as Request;
        const response = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        } as unknown as Response;

        const deleteAlunoController = new DeleteAlunoController(null);
        prismaClient.pessoaDadosPessoais.update = jest.fn().mockResolvedValue({});


        // Act
        await deleteAlunoController.handle(request, response);

        // Assert
     
        expect(response.status).toHaveBeenCalledWith(400);
        expect(response.json).toHaveBeenCalledWith({ msg: 'O id n√£o pode estar vazio! ‚ö†' });
       
    });

});