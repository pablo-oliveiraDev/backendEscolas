// Generated by CodiumAI

import { Request, Response } from "express";
import { CreateEspecialidadeController } from "../../controllers/especialidade/CreateEspecialidadeController";
import {prismaClient} from '../../database/prismaClient'


describe('CreateEspecialidadeController', () => {
});

// Test that a success message with status code 200 is returned after creating a new especialidade
it('should return a success message with status code 200 when creating a new especialidade', () => {
  // Test implementation goes here
});


// Test that a new especialidade is successfully created when valid input data is provided.
it('should create a new especialidade with valid input data', async () => {
  // Arrange
  const request = {
    body: {
      nomePessoa: 'John Doe',
      cpf: '123456789',
      tipoDePessoaId: 1,
      tipoEspecialidade: 'Math',
    },
  } as Request;
  const response = {
    status: jest.fn().mockReturnThis(),
    json: jest.fn(),
  } as unknown as Response;

  prismaClient.pessoaDadosEscolar.create = jest.fn().mockResolvedValue({});
  prismaClient.dadosDocumento.findMany = jest.fn().mockResolvedValue([{ id: 1 }]);
  prismaClient.pessoaDadosEscolar.findMany = jest.fn().mockResolvedValue([{ idEndereco: 1 }]);
  const createEspecialidadeController = new CreateEspecialidadeController();

  // Act
  await createEspecialidadeController.handle(request, response);

  // Assert
  console.log(prismaClient.dadosDocumento.findMany)
  expect(prismaClient.dadosDocumento.findMany).toHaveBeenCalledWith({
    where: {
      nome: 'John Doe',
      AND: {
        Cpf: '123456789',
      },
    },
    take: 1,
  });
  expect(prismaClient.pessoaDadosEscolar.findMany).toHaveBeenCalledWith({
    where: {
      idDadosDocumento: 1,
    },
  });
  
  expect(response.status).toHaveBeenCalledWith(200);
  expect(response.json).toHaveBeenCalledWith({ msg: 'Especialidade criada com sucesso!' });
});

