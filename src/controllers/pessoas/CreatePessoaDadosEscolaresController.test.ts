// Generated by CodiumAI

import { prismaClient } from "../../database/prismaClient";
import { CreatePessoaDadosEscolaresController } from "./CreatePessoaDadosEscolaresController";
import { Request, Response } from "express";

describe('CreatePessoaDadosEscolaresController', () => {



    // Test that the handle function of CreatePessoaDadosEscolaresController successfully creates pessoaDadosEscolares with valid input data
    it('should create pessoaDadosEscolares when valid input data is provided', async () => {
        // Mock request and response objects
        const request = {
            body: {
                especialidade: 'especialidade',
                disciplina: 'disciplina',
                turma: 'turma',
                diasSemana: 'diasSemana',
                horaInicio: 'horaInicio',
                horaFim: 'horaFim',
                presente: true,
                bimMod: 1,
                nota: 9,
                desempenho: 'desempenho',
                codigoTipoDepessoa: 1,
                idEndereco: 1,
                cpf: '123456789',
                nome: 'John Doe'
            }
        } as Request;
        const response = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn()
        } as unknown as Response;

        // Mock PrismaClient methods
        const idDadosPessoais = [{ id: 1 }];
        prismaClient.dadosDocumento.findMany = jest.fn().mockResolvedValue(idDadosPessoais);
        prismaClient.pessoaDadosEscolar.create= jest.fn().mockResolvedValue({});

        // Create instance of CreatePessoaDadosEscolaresController
        const createPessoaDadosEscolaresController = new CreatePessoaDadosEscolaresController();

        // Call handle function
        await createPessoaDadosEscolaresController.handle(request, response);

        // Assertions
        expect(prismaClient.dadosDocumento.findMany).toHaveBeenCalledWith({
            where: {
                Cpf: request.body.cpf,
                AND: {
                    nome: request.body.nome,
                },
            },
            take: 1
        });
        expect(prismaClient.pessoaDadosEscolar.create).toHaveBeenCalledWith({
            data: {
                disciplina: {
                    create: {
                        nome: request.body.disciplina,
                        tipoDePessoaId: request.body.codigoTipoDepessoa,
                        idEndereco: request.body.idEndereco,
                        idDadosPessoais: idDadosPessoais[0].id
                    }
                },
                especialidade: {
                    create: {
                        especialidade: request.body.especialidade,
                        tipoDePessoaId: request.body.codigoTipoDepessoa,
                        idEndereco: request.body.idEndereco,
                        idDadosPessoais: idDadosPessoais[0].id
                    }
                },
                turma: {
                    create: {
                        nome: request.body.turma,
                        tipoDePessoaId: request.body.codigoTipoDepessoa,
                        idEndereco: request.body.idEndereco,
                        idDadosPessoais: idDadosPessoais[0].id
                    }
                },
                horario: {
                    create: {
                        diasSemana: request.body.diasSemana,
                        horaInicio: request.body.horaInicio,
                        horaFim: request.body.horaFim,
                        tipoDePessoaId: request.body.codigoTipoDepessoa,
                        idEndereco: request.body.idEndereco,
                        idDadosPessoais: idDadosPessoais[0].id
                    }
                },
                tipoDePessoa: {
                    connect: {
                        id: request.body.codigoTipoDepessoa
                    }
                },
                endereco: {
                    connect: {
                        id: request.body.idEndereco
                    }
                },
                dadosDocumento: {
                    connect: {
                        id: idDadosPessoais[0].id
                    }
                }
            }
        });
        expect(response.status).toHaveBeenCalledWith(200);
        expect(response.json).toHaveBeenCalledWith({});
    });

});